# .github/workflows/reusable-build-test.yml
name: Reusable - C++ Build & Test (Linux)

on:
  workflow_call: # 이 워크플로우가 다른 워크플로우에 의해 호출될 수 있도록 설정
    # 입력값 정의 (필요시)
    # inputs:
    #   build_type:
    #     description: 'Build type (e.g., Debug, Release)'
    #     required: false
    #     type: string
    #     default: 'Release'
    # 출력값 정의 (필요시)
    # outputs:
    #   artifact_path:
    #     description: 'Path to the built artifact'
    #     value: ${{ jobs.build_job.outputs.artifact_path }}

jobs:
  build_job: # Job 이름은 자유롭게 지정 가능
    name: Build and Test C++ Code
    runs-on: ubuntu-latest
    steps:
      - name: Install Build Dependencies (inc. jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake git curl zip unzip tar pkg-config ninja-build jq
          # libmysqlclient-dev # 필요 시 주석 해제
      - name: Check out source code repository
        uses: actions/checkout@v4
        with: { submodules: true, fetch-depth: 0 }
      - name: Enable vcpkg GHA Cache Integration
        uses: actions/github-script@v7
        with: { script: "core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\ncore.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');" }
      - name: Configure vcpkg Binary Caching Env Var
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV
      - name: Cache vcpkg Downloads & Buildtrees
        uses: actions/cache@v4
        with:
            path: "|\n${{ github.workspace }}/vcpkg/downloads\n${{ github.workspace }}/vcpkg/buildtrees\n"
            key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
            restore-keys: | 
                vcpkg-${{ runner.os }}-
      - name: Update and Bootstrap vcpkg (Linux) # 이름 변경 및 업데이트 단계 추가
        run: |
          cd ${{ github.workspace }}/vcpkg
          git pull origin master
          cd ..
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
      - name: Cache CMake Build Directory
        uses: actions/cache@v4
        with: 
            path: ${{ github.workspace }}/build
            key: build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/vcpkg.json') }}
            restore-keys: | 
                build-${{ runner.os }}-
      - name: Configure CMake Project (Linux, Release)
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=Release # 또는 inputs.build_type 사용
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=x64-linux
          # CMakeLists.txt에서 option() 기본값이 ON이므로 -DBUILD_TESTING=ON 불필요
      - name: Build Project using CMake (Linux)
        run: cmake --build build -j $(nproc)
      - name: Run tests via CTest (Linux)
        run: |
          cd build
          ctest --output-on-failure
          cd ..
      # 빌드 결과물 경로 등을 출력으로 설정 가능 (필요시)
      # - name: Set artifact path output
      #   id: set_path
      #   run: echo "artifact_path=build/bin/CherryRecorder-Server-App" >> $GITHUB_OUTPUT