# .github/workflows/reusable-connection-check.yml
name: Reusable - Connection Check (HTTP & TCP)

on:
  workflow_call:
    inputs:
      server_address:
        description: '배포된 서버의 주소 (예: NLB DNS 이름, IP 주소)'
        required: true
        type: string
      health_check_port:
        description: 'HTTP Health Check 엔드포인트 포트 번호'
        required: true
        type: string
        default: "8080"
      http_port:
        description: 'HTTP 서버 포트 번호'
        required: false
        type: string
        default: "8080"
      echo_server_port:
        description: '(Deprecated) TCP Echo 서버 리슨 포트 번호 - 호환성을 위해 유지'
        required: false
        type: string
        default: "33333"
      websocket_port:
        description: 'WebSocket Chat 서버 포트 번호'
        required: false
        type: string
        default: "33334"
      max_attempts:
        description: '각 포트에 대한 최대 연결 시도 횟수'
        required: false
        type: string
        default: '6'
      retry_delay_seconds:
        description: '재시도 간 기본 지연 시간 (초) - 실제 지연은 시도 횟수에 따라 증가'
        required: false
        type: string
        default: '10'
      connect_timeout_seconds:
        description: '각 연결 시도에 대한 타임아웃 시간 (초)'
        required: false
        type: string
        default: '5'
      expected_http_response:
        description: 'HTTP Health Check 응답 본문에 포함되어야 하는 문자열 (선택 사항)'
        required: false
        type: string
        default: ''
    outputs:
      connection_status:
        description: "모든 연결 확인 최종 결과 ('success' 또는 'fail')"
        value: ${{ jobs.check_job.outputs.status }}

jobs:
  check_job:
    name: Check Connection to Server Ports
    runs-on: ubuntu-24.04
    env:
      HTTP_PORT: ${{ inputs.http_port || '58080' }}
      WEBSOCKET_PORT: ${{ inputs.websocket_port || '33335' }}
    outputs:
      status: ${{ steps.set-status.outputs.final_status }}
    steps:
      - name: Install network tools
        run: |
          sudo apt-get update && \
          sudo apt-get install -y --no-install-recommends netcat-openbsd curl dnsutils && \
          sudo rm -rf /var/lib/apt/lists/*
        shell: bash

      # DNS 검증 단계 추가
      - name: Verify DNS resolution
        run: |
          echo "Resolving hostname: ${{ inputs.server_address }}"
          IP_ADDRESSES=$(dig +short ${{ inputs.server_address }})
          
          if [ -z "$IP_ADDRESSES" ]; then
            echo "Warning: Could not resolve hostname ${{ inputs.server_address }}"
            echo "This might be a DNS issue or the hostname might be incorrect."
          else
            echo "Hostname resolved to: $IP_ADDRESSES"
          fi
        shell: bash
        continue-on-error: true

      - name: Perform Connection Checks
        id: connection-check
        run: |
          MAX_ATTEMPTS=${{ inputs.max_attempts || 6 }}
          RETRY_DELAY=${{ inputs.retry_delay_seconds || 10 }}
          CONNECT_TIMEOUT=${{ inputs.connect_timeout_seconds || 5 }}
          
          # --- 1. HTTP Health Endpoint 확인 ---
          echo "Checking HTTP endpoint: http://${{ inputs.server_address }}:${HTTP_PORT}/health"
          
          attempt=1
          while [ $attempt -le $MAX_ATTEMPTS ]; do
            echo "Attempt $attempt/$MAX_ATTEMPTS..."
            
            if curl -sS --fail --connect-timeout $CONNECT_TIMEOUT "http://${{ inputs.server_address }}:${HTTP_PORT}/health"; then
              echo "Health check successful on port ${HTTP_PORT}!"
              break
            fi
            
            if [ $attempt -eq $MAX_ATTEMPTS ]; then
              echo "Error: HTTP Health check failed after $MAX_ATTEMPTS attempts."
              exit 1
            fi
            
            echo "Health check failed, retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
            attempt=$((attempt+1))
          done

          # --- 2. WebSocket 연결 확인 (netcat 사용) ---
          echo "Checking WebSocket endpoint: ${{ inputs.server_address }}:${WEBSOCKET_PORT}"
          
          attempt=1
          while [ $attempt -le $MAX_ATTEMPTS ]; do
            echo "Attempt $attempt/$MAX_ATTEMPTS..."
            
            if nc -z -w $CONNECT_TIMEOUT ${{ inputs.server_address }} $WEBSOCKET_PORT; then
              echo "WebSocket port ${WEBSOCKET_PORT} is open!"
              break
            fi
            
            if [ $attempt -eq $MAX_ATTEMPTS ]; then
              echo "Error: WebSocket connection test failed after $MAX_ATTEMPTS attempts."
              exit 1
            fi
            
            echo "WebSocket connection test failed, retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
            attempt=$((attempt+1))
          done
          
          echo "All connection checks passed successfully!"
          exit 0
        shell: bash
        continue-on-error: true

      # 최종 상태 설정
      - name: Set final connection status
        id: set-status
        if: always()
        run: |
          HTTP_SUCCESS="${{ steps.http-check.outputs.http_success }}"
          TCP_SUCCESS="${{ steps.tcp-check.outputs.tcp_success }}"
          
          if [ "$HTTP_SUCCESS" = "true" ] && [ "$TCP_SUCCESS" = "true" ]; then
            echo "All connection checks passed successfully!"
            echo "final_status=success" >> $GITHUB_OUTPUT
          else
            echo "Some connection checks failed!"
            echo "HTTP Health check: ${HTTP_SUCCESS:-false}"
            echo "TCP Echo check: ${TCP_SUCCESS:-false}"
            echo "final_status=fail" >> $GITHUB_OUTPUT
          fi
        shell: bash