# .github/workflows/reusable-deploy-aws.yml
# 목적: ECR에 푸시된 이미지를 사용하여 AWS ECS (EC2 유형) 서비스를 업데이트합니다.
name: Reusable - Deploy to AWS ECS (EC2 Type)

on:
  workflow_call:
    # 입력값 정의
    inputs:
      image_name_ecr: { required: true, type: string }
      image_tag: { required: true, type: string } # 배포할 고유 태그 (SHA)
      aws_region: { required: true, type: string }
      ecs_cluster_name: { required: true, type: string }
      ecs_service_name: { required: true, type: string }
      ecs_task_def_family: { required: true, type: string }
      container_name: { required: true, type: string }
      task_definition_template_path: { required: true, type: string }
      # Task Definition 템플릿 치환에 필요한 환경 변수들을 JSON 문자열로 받음
      env_vars_for_template: { required: false, type: string, default: '{}' }
    # 비밀값 정의
    secrets:
      aws_role_to_assume: { required: true }
      # Task Definition 템플릿 치환에 필요한 비밀 정보들 (호출자가 전달)
      # 예: DB_PASSWORD_SECRET_ARN: { required: false }

jobs:
  deploy_job:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    # OIDC 인증 및 템플릿 파일 읽기 권한
    permissions:
      id-token: write
      contents: read

    steps:
      # 1. 소스 코드 체크아웃 (템플릿 파일 접근 위해)
      - name: Check out source code
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정 (OIDC)
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}

      # 3. Task Definition 파일 생성 (템플릿 + envsubst)
      - name: Create Task Definition file from template
        id: task-def
        env:
          # 치환에 사용할 변수들을 환경 변수로 설정
          IMAGE_URI: ${{ inputs.image_name_ecr }}:${{ inputs.image_tag }}
          CONTAINER_NAME: ${{ inputs.container_name }}
          TASK_DEFINITION_FAMILY: ${{ inputs.ecs_task_def_family }}
          AWS_REGION: ${{ inputs.aws_region }}
          # 입력받은 JSON 문자열을 파싱하여 환경 변수로 추가 설정 (jq 필요)
          # 예: SERVER_PORT_VALUE, DB_HOST, DB_USER 등
          ${{ fromJson(inputs.env_vars_for_template) }}
          # 비밀 정보도 환경 변수로 설정 (주의: 로그 노출 가능성 있으므로 신중히 사용)
          # DB_PASSWORD_SECRET_ARN: ${{ secrets.DB_PASSWORD_SECRET_ARN }}
        run: |
          set -e
          echo "Generating task definition file from template: ${{ inputs.task_definition_template_path }}"
          # gettext-base (envsubst) 와 jq 설치 (jq는 Job 1에서 설치했다고 가정)
          sudo apt-get update && sudo apt-get install -y --no-install-recommends gettext-base jq
          # envsubst로 환경 변수 치환하여 새 파일 생성
          # 입력받은 JSON을 순회하며 export (더 안전한 방법 고려 필요)
          echo '${{ inputs.env_vars_for_template }}' | jq -r 'to_entries|map("\(.key)=\(.value|@sh)")|.[]' >> $GITHUB_ENV
          # 비밀값도 환경 변수로 export (주의!)
          # echo 'DB_PASSWORD_SECRET_ARN=${{ secrets.DB_PASSWORD_SECRET_ARN }}' >> $GITHUB_ENV # 예시
          envsubst < "${{ inputs.task_definition_template_path }}" > task-definition.json
          echo "Generated task-definition.json:"
          # cat task-definition.json # 민감 정보 포함 가능성 있으므로 주석 처리 권장
          echo "task_def_path=task-definition.json" >> $GITHUB_OUTPUT

      # 4. 새 Task Definition 리비전 등록
      - name: Register New Task Definition Revision
        id: register-task-def
        run: |
          set -e
          echo "Registering new task definition revision..."
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task_def_path }})
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_INFO | jq -r .taskDefinition.taskDefinitionArn)
          echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      # 5. ECS 서비스 업데이트
      - name: Update ECS Service
        env:
          ECS_CLUSTER_NAME: ${{ inputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ inputs.ecs_service_name }}
          NEW_TASK_DEF_ARN: ${{ steps.register-task-def.outputs.task_def_arn }}
        run: |
          set -e
          echo "Updating service $ECS_SERVICE_NAME in cluster $ECS_CLUSTER_NAME..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

      # 6. 배포 완료 대기
      - name: Wait for deployment stabilization
        env:
          ECS_CLUSTER_NAME: ${{ inputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ inputs.ecs_service_name }}
        run: |
          set -e
          echo "Waiting for service $ECS_SERVICE_NAME to become stable..."
          aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME
          echo "Service $ECS_SERVICE_NAME is stable."