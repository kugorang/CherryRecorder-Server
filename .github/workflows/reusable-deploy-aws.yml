# .github/workflows/reusable-deploy-aws.yml
# 목적: ECR에 푸시된 이미지를 사용하여 AWS ECS (EC2 유형) 서비스를 업데이트합니다.
name: Reusable - Deploy to AWS ECS (EC2 Type)

on:
  workflow_call:
    # 입력값 정의
    inputs:
      aws_region: { required: true, type: string }
      image_name_ecr: { required: true, type: string }
      image_tag: { required: true, type: string } # 배포할 고유 태그 (SHA)
      container_name: { required: true, type: string }
      server_port_value: { required: true, type: string, default: "8080" }
      task_definition_template_path: { required: true, type: string }
      ecs_cluster_name: { required: true, type: string }
      ecs_service_name: { required: true, type: string }
      # db_host: { required: false, type: string }
      # db_user: { required: false, type: string }
    # 비밀값 정의
    secrets:
      aws_role_to_assume: { required: true }
      task_execution_role_arn: { required: true }
      # Task Definition 템플릿 치환에 필요한 비밀 정보들 (호출자가 전달)
      # 예: DB_PASSWORD_SECRET_ARN: { required: false }

jobs:
  deploy_job:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    # OIDC 인증 및 템플릿 파일 읽기 권한
    permissions:
      id-token: write
      contents: read

    steps:
      # 1. 소스 코드 체크아웃 (템플릿 파일 접근 위해)
      - name: Check out source code
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정 (OIDC)
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}

      # - name: Render task definition template
      #   run: |
      #     sed -e "s|\$FAMILY|${FAMILY}|g" \
      #         -e "s|\$EXECUTION_ROLE_ARN|${EXECUTION_ROLE_ARN}|g" \
      #         -e "s|\$CONTAINER_NAME|${CONTAINER_NAME}|g" \
      #         -e "s|\$SERVER_PORT_VALUE|${SERVER_PORT_VALUE}|g" \
      #         -e "s|\$AWS_REGION|${AWS_REGION}|g" \
      #         .github/task-definition.json.template > rendered.json
      #   env:
      #     FAMILY: ${{ vars.ECS_TASK_DEF_FAMILY }}
      #     EXECUTION_ROLE_ARN: ${{ secrets.task_execution_role_arn }}
      #     CONTAINER_NAME: ${{ inputs.container_name }}
      #     SERVER_PORT_VALUE: ${{ inputs.server_port_value }}
      #     AWS_REGION: ${{ inputs.aws_region }}

      # - name: Validate rendered task definition
      #   run: jq . rendered.json

      # - name: Render and Register Amazon ECS Task Definition
      #   id: render-image
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     작업 정의 템플릿 파일 경로
      #     task-definition: rendered.json
      #     업데이트할 컨테이너 이름
      #     container-name: ${{ inputs.container_name }}
      #     사용할 도커 이미지 URI
      #     image: ${{ inputs.image_name_ecr }}:${{ inputs.image_tag }}

      - name: Render task definition template
        run: |
          jq --argjson server_port_value "${{ inputs.server_port_value }}" \
             '.containerDefinitions[0].portMappings[0].containerPort = $server_port_value' \
             ${{ inputs.task_definition_template_path }} > rendered.json

      # - name: Register task definition
      #   id: register-task
      #   run: |
      #     TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.render-image.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
      #     echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Register task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://rendered.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service --cluster ${{ inputs.ecs_cluster_name }} --service ${{ inputs.ecs_service_name }} --task-definition ${{ steps.register-task.outputs.task_def_arn }}

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ inputs.ecs_cluster_name }} --service ${{ inputs.ecs_service_name }} --task-definition ${{ steps.register-task.outputs.task_def_arn }}

      ## 5. ECS 서비스 업데이트
      #- name: Update ECS Service
      #  env:
      #    ECS_CLUSTER_NAME: ${{ inputs.ecs_cluster_name }}
      #    ECS_SERVICE_NAME: ${{ inputs.ecs_service_name }}
      #    # 'render-task-def' 스텝의 출력(새 작업 정의 ARN) 사용
      #    NEW_TASK_DEF_ARN: ${{ steps.render-task-def.outputs.task-definition-arn }}
      #  run: |
      #    set -e
      #    echo "Updating service $ECS_SERVICE_NAME in cluster $ECS_CLUSTER_NAME..."
      #    aws ecs update-service \
      #      --cluster $ECS_CLUSTER_NAME \
      #      --service $ECS_SERVICE_NAME \
      #      --task-definition $NEW_TASK_DEF_ARN \
      #      --force-new-deployment
      #
      ## 6. 배포 완료 대기
      #- name: Wait for deployment stabilization
      #  env:
      #    ECS_CLUSTER_NAME: ${{ inputs.ecs_cluster_name }}
      #    ECS_SERVICE_NAME: ${{ inputs.ecs_service_name }}
      #  run: |
      #    set -e
      #    echo "Waiting for service $ECS_SERVICE_NAME to become stable..."
      #    aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME
      #    echo "Service $ECS_SERVICE_NAME is stable."