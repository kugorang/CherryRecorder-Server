# .github/workflows/main-ci-cd.yml
name: CI/CD - CherryRecorder Server (Main Orchestrator)

# ==================================================
# 필수 GitHub Secrets 요약 (이 워크플로우 및 하위 워크플로우에서 사용)
# ==================================================
# AWS_REGION, AWS_ROLE_TO_ASSUME (OIDC용), AWS_ECR_REPOSITORY
# DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, DOCKERHUB_REPO
# SERVER_ADDRESS, SERVER_PORT
# AWS_ACCOUNT_ID (선택 사항), ECS 관련 정보(클러스터, 서비스 이름 등 Secret 또는 input으로 관리)
# ==================================================

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # --- 1. C++ 코드 빌드 및 테스트 (재사용 워크플로우 호출) ---
  call_build_test:
    name: 1. Build & Test Source Code
    # ./.github/workflows/ 경로 아래의 재사용 워크플로우 파일을 호출합니다.
    uses: ./.github/workflows/reusable-build-test.yml
    # 재사용 워크플로우에 전달할 입력값 (이 예제에서는 없음)
    # with:
    #   example_input: value
    # 재사용 워크플로우에 전달할 시크릿 (이 예제에서는 없음)
    # secrets: inherit # 모든 시크릿 전달 (또는 필요한 것만 명시)

  # --- 2. 문서 생성 및 아티팩트 업로드 (재사용 워크플로우 호출) ---
  # 빌드/테스트 성공 후에 병렬로 실행 가능
  call_docs_build:
    name: 2. Generate Documentation
    uses: ./.github/workflows/reusable-docs-build.yml
    needs: call_build_test # 빌드/테스트 Job 완료 후 실행

  # --- 3. GitHub Pages 배포 (메인 워크플로우 내 직접 실행) ---
  # 문서 생성/업로드 완료 후에 실행
  deploy_docs_pages:
    name: 3. Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: call_docs_build # 문서 생성/업로드 Job 완료 후 실행
    permissions: { pages: write, id-token: write }
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }} }
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # --- 4. Docker 이미지 빌드 및 태그 지정 (재사용 워크플로우 호출) ---
  # 빌드/테스트 성공 후에 실행 (이후 푸시/배포 작업의 기반)
  call_docker_build:
    name: 4. Build Docker Image
    uses: ./.github/workflows/reusable-docker-build.yml
    needs: call_build_test # 빌드/테스트 Job 완료 후 실행
    # 재사용 워크플로우에 필요한 입력값 전달
    with:
      ecr_repo: ${{ vars.AWS_ECR_REPOSITORY }}
      dockerhub_repo: ${{ vars.DOCKERHUB_REPO }}
    # 재사용 워크플로우에 필요한 시크릿 전달
    secrets:
      # Docker Hub 사용자 이름은 input 대신 secret으로 전달하는 것이 더 안전할 수 있습니다.
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      # AWS 관련 시크릿은 ECR 로그인 시 필요하므로 다음 단계로 넘김

  # --- 5. Docker Hub 푸시 (재사용 워크플로우 호출) ---
  # Docker 이미지 빌드 완료 후에 병렬로 실행 (AWS 배포와 독립적)
  call_push_dh:
    name: 5. Push Image to Docker Hub
    uses: ./.github/workflows/reusable-docker-push-dh.yml
    needs: call_docker_build # Docker 빌드 Job 완료 후 실행
    # 재사용 워크플로우에 필요한 입력값 (이전 Job의 출력값 사용)
    with:
      image_name_dh: ${{ needs.call_docker_build.outputs.image_name_dh }}
      image_tag_sha: ${{ needs.call_docker_build.outputs.image_tag_sha }}
      image_tag_latest: ${{ needs.call_docker_build.outputs.image_tag_latest }}
    # 재사용 워크플로우에 필요한 시크릿 전달
    secrets:
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}

  # --- 6. ECR 푸시 (재사용 워크플로우 호출) ---
  # Docker 이미지 빌드 완료 후에 병렬로 실행 (Docker Hub 푸시와 병렬)
  call_push_ecr:
    name: 6. Push Image to AWS ECR
    uses: ./.github/workflows/reusable-docker-push-ecr.yml
    needs: call_docker_build # Docker 빌드 Job 완료 후 실행
    # OIDC 토큰 요청 권한은 호출하는 쪽(여기)에도 필요할 수 있습니다.
    permissions:
      id-token: write
    # 재사용 워크플로우에 필요한 입력값 (이전 Job의 출력값 사용)
    with:
      image_name_ecr: ${{ needs.call_docker_build.outputs.image_name_ecr }}
      image_tag_sha: ${{ needs.call_docker_build.outputs.image_tag_sha }}
      image_tag_latest: ${{ needs.call_docker_build.outputs.image_tag_latest }}
      aws_region: ${{ vars.AWS_REGION }}
    # 재사용 워크플로우에 필요한 시크릿 전달
    secrets:
      aws_role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

  # --- 7. AWS ECS 배포 (재사용 워크플로우 호출) ---
  # ECR 푸시 완료 후에 실행
  call_deploy_aws:
    name: 7. Deploy Application to AWS ECS
    uses: ./.github/workflows/reusable-deploy-aws.yml
    needs: call_push_ecr # ECR 푸시 Job 완료 후 실행
    # OIDC 토큰 요청 권한 필요
    permissions:
      id-token: write
      contents: read # Task Definition 템플릿 파일 읽기 위해 필요
    # 재사용 워크플로우에 필요한 입력값 전달
    with:
      # ECR 이미지 정보 (빌드 Job 출력값 사용)
      image_name_ecr: ${{ needs.call_docker_build.outputs.image_name_ecr }}
      image_tag: ${{ needs.call_docker_build.outputs.image_tag_sha }} # 배포 시 고유 태그 사용
      # AWS 및 ECS 정보 (Secrets 또는 직접 값 사용)
      aws_region: ${{ vars.AWS_REGION }}
      ecs_cluster_name: CherryRecorderCluster # 실제 클러스터 이름 (Secret 권장: secrets.ECS_CLUSTER_NAME)
      ecs_service_name: cherryrecorder-service # 실제 서비스 이름 (Secret 권장: secrets.ECS_SERVICE_NAME)
      ecs_task_def_family: cherryrecorder-task-def # 실제 작업 정의 패밀리 (Secret 권장: secrets.ECS_TASK_DEF_FAMILY)
      container_name: cherryrecorder-server-container # 실제 컨테이너 이름 (Secret 권장: secrets.CONTAINER_NAME)
      # Task Definition 템플릿 파일 경로 (저장소 루트 기준)
      task_definition_template_path: .github/task-definition.json.template
    # 재사용 워크플로우에 필요한 시크릿 전달
    secrets:
      aws_role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      # Task Definition 템플릿에서 사용할 다른 환경 변수/비밀 값 전달 (예시)
      # SERVER_PORT_VALUE: ${{ secrets.SERVER_PORT || '8080' }}
      # DB_HOST: ${{ secrets.DB_HOST }}
      # DB_PASSWORD_SECRET_ARN: ${{ secrets.DB_PASSWORD_SECRET_ARN }}

  # --- 8. 연결 확인 (재사용 워크플로우 호출) ---
  # AWS 배포 완료 후에 실행
  call_connection_check:
    name: 8. Connection Check to Deployed Server
    uses: ./.github/workflows/reusable-connection-check.yml
    needs: call_deploy_aws # AWS 배포 Job 완료 후 실행
    # 재사용 워크플로우에 필요한 시크릿 직접 전달
    secrets:
      server_address: ${{ secrets.SERVER_ADDRESS }}
      server_port: ${{ secrets.SERVER_PORT }}