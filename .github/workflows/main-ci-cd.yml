# .github/workflows/main-ci-cd.yml
# 워크플로우 이름: 주 실행 워크플로우임을 명시
name: CI/CD - CherryRecorder Server Orchestrator

# ==================================================
# 필수 GitHub Secrets 및 Variables 요약
# ==================================================
# 이 워크플로우 및 하위 재사용 워크플로우들이 작동하려면 아래 항목들을
# GitHub 저장소의 Settings > Secrets and variables > Actions 에서 설정해야 합니다.
#
# --- Secrets (민감 정보) ---
# AWS_ROLE_TO_ASSUME: GitHub Actions OIDC 인증에 사용할 AWS IAM 역할 ARN
# DOCKERHUB_USERNAME: Docker Hub 사용자 이름
# DOCKERHUB_TOKEN: Docker Hub Access Token (비밀번호 아님!)
# SERVER_ADDRESS: 배포된 서버의 외부 접속 주소 (예: ALB DNS 이름)
# SERVER_PORT: 배포된 서버의 외부 접속 포트 (예: ALB 리스너 포트 80 또는 443)
# DB_PASSWORD_SECRET_ARN 등: (선택 사항) Task Definition 템플릿에서 참조할 AWS Secrets Manager ARN 등
#
# --- Variables (민감하지 않은 설정값) ---
# AWS_REGION: 대상 AWS 리전 (예: ap-northeast-2)
# AWS_ECR_REPOSITORY: ECR 리포지토리 이름 (예: cherryrecorder-server)
# DOCKERHUB_REPO: Docker Hub 리포지토리 이름 (예: my-dockerhub-id/cherryrecorder-server)
# ECS_CLUSTER_NAME: ECS 클러스터 이름
# ECS_SERVICE_NAME: ECS 서비스 이름
# ECS_TASK_DEF_FAMILY: ECS 작업 정의 패밀리 이름
# CONTAINER_NAME: ECS 작업 정의 내 컨테이너 이름
# TASK_EXECUTION_ROLE_ARN: ECS 작업 실행 역할 ARN (Task Definition 템플릿에서 사용)
# TASK_ROLE_ARN: (선택 사항) ECS 작업 역할 ARN (애플리케이션이 AWS 서비스 호출 시 필요)
# SERVER_PORT_VALUE: 애플리케이션 리슨 포트 번호 (Task Definition 템플릿에서 사용, 예: 8080)
# ==================================================

on:
  # main 브랜치 push 또는 main 브랜치 대상 PR 시 실행
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # --- 1. C++ 코드 빌드 및 테스트 ---
  # Linux 환경에서 코드를 빌드하고 단위 테스트를 실행합니다.
  # 후속 단계(문서 생성, Docker 빌드)의 기반이 됩니다.
  call_build_test:
    name: 1. Build & Test (Linux)
    uses: ./.github/workflows/reusable-build-test.yml
    # 이 재사용 워크플로우는 현재 별도 입력이나 시크릿이 필요하지 않습니다.

  # --- 2. 문서 생성 ---
  # 빌드/테스트가 성공하면 Doxygen 문서를 생성하고 업로드 준비를 합니다.
  # Docker 빌드/푸시 및 배포와 병렬로 실행될 수 있습니다.
  call_docs_build:
    name: 2. Generate Documentation
    uses: ./.github/workflows/reusable-docs-build.yml
    needs: call_build_test # Job 1 성공 후 실행

  # --- 3. GitHub Pages 배포 ---
  # 문서 생성이 완료되면 GitHub Pages로 배포합니다.
  deploy_docs_pages:
    name: 3. Deploy Docs to GitHub Pages
    runs-on: ubuntu-latest
    needs: call_docs_build # Job 2 성공 후 실행
    permissions: { pages: write, id-token: write } # Pages 배포 권한
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy Docs to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # --- 4. Docker 이미지 빌드 및 태그 지정 ---
  # 빌드/테스트가 성공하면 Docker 이미지를 빌드하고 ECR 및 Docker Hub용 태그를 지정합니다.
  # 후속 푸시 단계(ECR, Docker Hub)의 기반이 됩니다.
  call_docker_build:
    name: 4. Build Docker Image
    uses: ./.github/workflows/reusable-docker-build.yml
    needs: call_build_test # Job 1 성공 후 실행
    # 재사용 워크플로우에 필요한 입력값(리포지토리 이름 등) 전달
    permissions:
      packages: write # GitHub 패키지 접근 권한
      contents: read  # 소스 코드 접근 권한
    with:
      # GitHub Variables 사용 (권장)
      aws_region: ${{ vars.AWS_REGION }}
      aws_account_id: ${{ vars.AWS_ACCOUNT_ID }} # ECR 주소 구성에 필요 시
      ecr_repo: ${{ vars.AWS_ECR_REPOSITORY }}
      dockerhub_repo: ${{ vars.DOCKERHUB_REPO }}

  # --- 5. Docker Hub 푸시 ---
  # Docker 이미지 빌드가 완료되면 Docker Hub로 푸시합니다.
  # AWS 관련 작업과 병렬로 실행됩니다.
  call_push_dh:
    name: 5. Push Image to Docker Hub
    uses: ./.github/workflows/reusable-docker-push-dh.yml
    needs: call_docker_build # Job 4 성공 후 실행
    permissions:
      packages: read
    with:
      # Job 4의 출력값(이미지 이름 및 태그)을 입력으로 전달
      dockerhub_repo_name: ${{ needs.call_docker_build.outputs.dh_repo_name }}
      image_tag_sha: ${{ needs.call_docker_build.outputs.image_tag_sha }}
      image_tag_latest: ${{ needs.call_docker_build.outputs.image_tag_latest }}
      ghcr_image_uri: ${{ needs.call_docker_build.outputs.ghcr_image_uri }}
    secrets:
      # Docker Hub 로그인 정보 전달
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}

  # --- 6. ECR 푸시 ---
  # Docker 이미지 빌드가 완료되면 ECR로 푸시합니다.
  # Docker Hub 푸시와 병렬로 실행되며, 후속 AWS 배포 단계의 선행 작업입니다.
  call_push_ecr:
    name: 6. Push Image to AWS ECR
    uses: ./.github/workflows/reusable-docker-push-ecr.yml
    needs: call_docker_build # Job 4 성공 후 실행
    permissions:
      id-token: write # OIDC 인증을 위해 필요
      packages: read
    with:
      # Job 4의 출력값 및 Variable 사용
      image_name_ecr: ${{ needs.call_docker_build.outputs.image_name_ecr }}
      image_tag_sha: ${{ needs.call_docker_build.outputs.image_tag_sha }}
      image_tag_latest: ${{ needs.call_docker_build.outputs.image_tag_latest }}
      aws_region: ${{ vars.AWS_REGION }}
      ghcr_image_uri: ${{ needs.call_docker_build.outputs.ghcr_image_uri }}
    secrets:
      # AWS OIDC 역할 ARN 전달
      aws_role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

  # --- 7. AWS ECS 배포 ---
  # ECR 푸시가 완료되면 ECS 서비스를 업데이트하여 새 이미지를 배포합니다.
  call_deploy_aws:
    name: 7. Deploy Application to AWS ECS
    uses: ./.github/workflows/reusable-deploy-aws.yml
    needs: 
      - call_docker_build # Job 4 성공 후 실행
      - call_push_ecr # Job 6 성공 후 실행
    permissions:
      id-token: write   # OIDC 인증
      contents: read    # Task Definition 템플릿 파일 읽기
    with:
      # ECR 이미지 정보 (Job 4 출력값 사용, 배포는 고유 SHA 태그 기준)
      image_name_ecr: ${{ needs.call_docker_build.outputs.image_name_ecr }}
      image_tag: ${{ needs.call_docker_build.outputs.image_tag_sha }}
      # AWS 및 ECS 정보 (Variables 사용 권장)
      aws_region: ${{ vars.AWS_REGION }}
      ecs_cluster_name: ${{ vars.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ vars.ECS_SERVICE_NAME }}
      container_name: ${{ vars.CONTAINER_NAME }}
      # Task Definition 템플릿 파일 경로
      task_definition_template_path: .github/task-definition.json.template
      # Task Definition 템플릿에 필요한 추가 환경 변수 전달
      server_port_value: ${{ vars.SERVER_PORT_VALUE }}
      # db_host: ${{ vars.DB_HOST }}
      # db_user: ${{ vars.DB_USER }}
    secrets:
      # AWS OIDC 역할 ARN
      aws_role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      execution_role_arn: ${{ secrets.EXECUTION_ROLE_ARN }}
      # Task Definition 템플릿에 필요한 비밀 정보 전달
      # 예: DB_PASSWORD_SECRET_ARN: ${{ secrets.DB_PASSWORD_SECRET_ARN }}

  # --- 8. 연결 확인 ---
  # AWS 배포가 완료되면 배포된 서비스로 네트워크 연결을 시도하여 최종 확인합니다.
  call_connection_check:
    name: 8. Connection Check to Deployed Server
    uses: ./.github/workflows/reusable-connection-check.yml
    needs: call_deploy_aws # Job 7 성공 후 실행
    # 접근 주소 및 포트 정보 전달 (Secrets 사용)
    secrets:
      server_address: ${{ secrets.SERVER_ADDRESS }}
      server_port: ${{ secrets.SERVER_PORT }}