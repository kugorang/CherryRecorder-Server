# .github/workflows/reusable-docker-build.yml
# 목적: Dockerfile을 사용하여 이미지를 빌드하고, ECR 및 Docker Hub 푸시를 위한 태그를 지정합니다.
name: Reusable - Build Docker Image with Cache

on:
  workflow_call:
    # 입력값: 리포지토리 이름, ECR 주소 구성 요소
    inputs:
      aws_region:
        description: 'AWS region for ECR'
        required: true
        type: string
      aws_account_id:
        description: 'AWS Account ID for ECR registry'
        required: true # ECR 주소 구성 위해 필요
        type: string
      ecr_repo:
        description: 'AWS ECR repository name'
        required: true
        type: string
      dockerhub_repo:
        description: 'Docker Hub repository name (e.g., repo, NOT user/repo)'
        required: true
        type: string
    # 출력값: 생성된 이미지의 전체 이름과 태그
    outputs:
      image_name_ecr:
        description: 'Full image name for ECR (without tags)'
        value: ${{ jobs.build_image_job.outputs.ecr_image_name_no_tag }}
      dh_repo_name:
        description: 'Docker Hub repository name (without username)'
        value: ${{ jobs.build_image_job.outputs.dh_repo_name_output }}
      image_tag_sha:
        description: 'Image tag based on Git SHA'
        value: ${{ jobs.build_image_job.outputs.tag_sha }}
      image_tag_latest:
        description: 'Image tag "latest"'
        value: 'latest'
      ghcr_image_uri:
        value: ${{ jobs.build_image_job.outputs.ghcr_uri_output }}

jobs:
  build_image_job:
    name: Build with Cache and Push GHCR
    runs-on: ubuntu-latest
    # GitHub 패키지 접근 권한 추가
    permissions:
      packages: write # GHCR 푸시 권한
      contents: read
    outputs:
      ecr_image_name_no_tag: ${{ steps.set-names.outputs.ecr_name }}
      dh_repo_name_output: ${{ steps.set-names.outputs.dh_repo }}
      tag_sha: ${{ steps.tag-image.outputs.tag }}
      ghcr_uri_output: ${{ steps.push-ghcr.outputs.image_uri_ghcr }}

    steps:
      # 1. 소스 코드 체크아웃
      - name: Check out source code
        uses: actions/checkout@v4

      # 2. 이미지 태그 설정 (Git SHA 사용)
      - name: Set Image Tag (SHA)
        id: tag-image
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      # 3. ECR 및 Docker Hub 이미지 전체 이름 설정 및 출력
      - name: Set Image Names (ECR, DH Repo, GHCR Base)
        id: set-names
        env:
          # 입력값 및 Secret 사용
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ inputs.aws_region }}
          ECR_REPO: ${{ inputs.ecr_repo }}
          DH_REPO: ${{ inputs.dockerhub_repo }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          # GHCR 베이스 이름 설정 (소문자 변환 포함)
          GHCR_OWNER_LC=$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          GHCR_REPO_LC=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          GHCR_BASE="ghcr.io/${GHCR_OWNER_LC}/${GHCR_REPO_LC}-build-cache"
          echo "ghcr_base_name=$GHCR_BASE" >> $GITHUB_OUTPUT
          echo "ecr_name=$ECR_REGISTRY/$ECR_REPO" >> $GITHUB_OUTPUT
          echo "dh_repo=$DH_REPO" >> $GITHUB_OUTPUT # <<< 리포지토리 이름만 출력

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Docker 이미지 빌드 및 태그 동시 지정
      - name: Build Docker image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          # 빌드할 태그 목록 (ECR용, GHCR용)
          tags: |
            ${{ steps.set-names.outputs.ecr_name }}:${{ steps.tag-image.outputs.tag }}
            ${{ steps.set-names.outputs.ecr_name }}:latest
            ${{ steps.set-names.outputs.ghcr_base_name }}:${{ steps.tag-image.outputs.tag }}
          # 푸시는 하지 않고 로컬 도커 데몬으로 로드
          push: false
          load: true
          # GHA 캐시 사용 설정
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # GHCR 로그인 및 푸시 단계 추가
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Push ONLY GHCR tag
        id: push-ghcr # 스텝 ID 부여
        env:
          # 푸시할 GHCR 이미지 태그 조합
          GHCR_IMAGE: ${{ steps.set-names.outputs.ghcr_base_name }}:${{ steps.tag-image.outputs.tag }}
        run: |
          echo "Pushing to GHCR: $GHCR_IMAGE"
          docker push $GHCR_IMAGE
          # 이미지 URI를 출력으로 설정
          echo "image_uri_ghcr=$GHCR_IMAGE" >> $GITHUB_OUTPUT