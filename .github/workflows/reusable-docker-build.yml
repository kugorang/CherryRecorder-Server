# .github/workflows/reusable-docker-build.yml
# 목적: Dockerfile을 사용하여 이미지를 빌드/캐시하고, GHCR에 푸시하며, 이미지 정보를 출력합니다.
name: Reusable - Build Docker Image, Push Cache/GHCR, Output Info

on:
  workflow_call:
    inputs:
      aws_region:
        description: 'AWS region for ECR'
        required: true
        type: string
      aws_account_id:
        description: 'AWS Account ID for ECR registry'
        required: true
        type: string
      ecr_repo:
        description: 'AWS ECR repository name'
        required: true
        type: string
      # Docker Hub 기본 리포 이름 (main-ci-cd.yml -> 이 워크플로우 -> main-ci-cd.yml -> push-dh 로 전달 위함)
      dockerhub_repo_base:
        description: 'Base Docker Hub repository name (without username)'
        required: true
        type: string
      # GHCR 리포 이름 (선택적, 기본값: GitHub 리포 이름)
      ghcr_repo_name:
        description: 'GHCR repository name (defaults to GitHub repo name)'
        required: false
        type: string
        default: ${{ github.event.repository.name }}

    outputs:
      image_digest:
        description: '빌드/푸시된 이미지의 다이제스트 (sha256:...)'
        value: ${{ jobs.build_image_job.outputs.digest }}
      image_tag_sha:
        description: 'Git SHA 기반 태그 (예: sha-xxxx)'
        value: ${{ jobs.build_image_job.outputs.tag_sha }}
      image_name_ecr:
        description: 'ECR용 전체 이미지 이름 (태그 제외)'
        value: ${{ jobs.build_image_job.outputs.ecr_image_name_no_tag }}
      # Docker Hub 기본 리포 이름 출력 (main-ci-cd.yml 거쳐 push-dh로 전달)
      dh_repo_name_base_output:
        description: 'Base Docker Hub repository name output'
        value: ${{ jobs.build_image_job.outputs.dh_repo_name_base_step_output }}
      ghcr_image_uri_sha:
         description: 'GHCR에 푸시된 이미지의 전체 URI (SHA 태그 포함)'
         value: ${{ jobs.build_image_job.outputs.ghcr_uri_sha_output }}

jobs:
  build_image_job:
    name: Build, Cache, Push GHCR, Get Info
    runs-on: ubuntu-latest
    permissions:
      packages: write # GHCR 푸시/캐시 권한
      contents: read
    outputs:
      # 스텝 출력을 Job 출력으로 매핑
      ecr_image_name_no_tag: ${{ steps.set-names.outputs.ecr_name }}
      dh_repo_name_base_step_output: ${{ steps.set-names.outputs.dh_repo_base }} # 이름 변경
      tag_sha: ${{ steps.tag-image.outputs.tag }}
      digest: ${{ steps.build-push.outputs.digest }} # build-push 액션의 digest 출력 사용
      ghcr_uri_sha_output: ${{ steps.set-names.outputs.ghcr_image_sha }} # 구성된 GHCR URI + 태그

    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Set Image Tag (SHA)
        id: tag-image
        run: echo "tag=sha-${{ github.sha }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set Image Names (ECR, GHCR) and Output Base DH Name
        id: set-names
        env:
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ inputs.aws_region }}
          ECR_REPO: ${{ inputs.ecr_repo }}
          DH_REPO_BASE_INPUT: ${{ inputs.dockerhub_repo_base }} # 입력 받은 기본 이름
          REPO_OWNER: ${{ github.repository_owner }}
          GHCR_REPO_INPUT: ${{ inputs.ghcr_repo_name }} # 입력값 사용
          TAG_SHA: ${{ steps.tag-image.outputs.tag }}
        run: |
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          ECR_NAME="$ECR_REGISTRY/$ECR_REPO"

          GHCR_OWNER_LC=$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          GHCR_REPO_LC=$(echo "$GHCR_REPO_INPUT" | tr '[:upper:]' '[:lower:]')
          GHCR_BASE="ghcr.io/${GHCR_OWNER_LC}/${GHCR_REPO_LC}"
          GHCR_IMAGE_SHA="${GHCR_BASE}:${TAG_SHA}"

          echo "ecr_name=$ECR_NAME" >> $GITHUB_OUTPUT
          echo "ghcr_image_sha=$GHCR_IMAGE_SHA" >> $GITHUB_OUTPUT
          echo "ghcr_cache_ref=${GHCR_BASE}:buildcache" >> $GITHUB_OUTPUT
          echo "dh_repo_base=$DH_REPO_BASE_INPUT" >> $GITHUB_OUTPUT # 입력받은 DH 기본 이름 출력
        shell: bash

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build and push to GHCR with Cache
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          # GHCR 푸시 및 캐시용 태그 지정
          tags: ${{ steps.set-names.outputs.ghcr_image_sha }}
          push: true # GHCR에는 항상 푸시 (캐시 및 다음 단계용)
          # GHCR 캐시 사용
          cache-from: type=registry,ref=${{ steps.set-names.outputs.ghcr_cache_ref }}
          cache-to: type=registry,ref=${{ steps.set-names.outputs.ghcr_cache_ref }},mode=max
          # 메타데이터에서 Digest 추출 위해 필요
          provenance: false # 필요 시 true로 변경 (digest 추출 방식 달라질 수 있음)
          sbom: false

      # build-push 액션 v5는 digest를 output으로 제공함
      - name: Check Digest Output
        run: |
          echo "Image pushed to GHCR with digest: ${{ steps.build-push.outputs.digest }}"
          if [ -z "${{ steps.build-push.outputs.digest }}" ]; then
            echo "Error: Failed to get digest from build-push action output."
            exit 1
          fi
        shell: bash