# .github/workflows/reusable-docker-build.yml
# 목적: Dockerfile을 사용하여 이미지를 빌드하고, ECR 및 Docker Hub 푸시를 위한 태그를 지정합니다.
name: Reusable - Build Docker Image

on:
  workflow_call:
    # 입력값: 리포지토리 이름, ECR 주소 구성 요소
    inputs:
      aws_region:
        description: 'AWS region for ECR'
        required: true
        type: string
      aws_account_id:
        description: 'AWS Account ID for ECR registry'
        required: true # ECR 주소 구성 위해 필요
        type: string
      ecr_repo:
        description: 'AWS ECR repository name'
        required: true
        type: string
      dockerhub_repo:
        description: 'Docker Hub repository name (e.g., user/repo)'
        required: true
        type: string
    # 출력값: 생성된 이미지의 전체 이름과 태그
    outputs:
      image_name_ecr:
        description: 'Full image name for ECR (without tags)'
        value: ${{ jobs.build_image_job.outputs.ecr_image_name_no_tag }}
      image_name_dh:
        description: 'Full image name for Docker Hub (without tags)'
        value: ${{ jobs.build_image_job.outputs.dh_image_name_no_tag }}
      image_tag_sha:
        description: 'Image tag based on Git SHA'
        value: ${{ jobs.build_image_job.outputs.tag_sha }}
      image_tag_latest:
        description: 'Image tag "latest"'
        value: 'latest'
      ghcr_image_uri:
        value: ${{ jobs.build_image_job.outputs.ghcr_uri }}

    # 비밀값: Docker Hub 사용자 이름 (태그 지정 시 필요)
    secrets:
      dockerhub_username:
        description: 'Docker Hub Username'
        required: true

jobs:
  build_image_job:
    name: Build and Tag Docker Image
    runs-on: ubuntu-latest
    # GitHub 패키지 접근 권한 추가
    permissions:
      packages: write
      contents: read
    outputs:
      ecr_image_name_no_tag: ${{ steps.set-names.outputs.ecr_name }}
      dh_image_name_no_tag: ${{ steps.set-names.outputs.dh_name }}
      tag_sha: ${{ steps.tag-image.outputs.tag }}
      ghcr_uri: ${{ steps.push-ghcr.outputs.image_uri }}

    steps:
      # 1. 소스 코드 체크아웃
      - name: Check out source code
        uses: actions/checkout@v4

      # 2. 이미지 태그 설정 (Git SHA 사용)
      - name: Set Image Tag
        id: tag-image
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      # 3. ECR 및 Docker Hub 이미지 전체 이름 설정 및 출력
      - name: Set Image Names
        id: set-names
        env:
          # 입력값 및 Secret 사용
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ inputs.aws_region }}
          ECR_REPO: ${{ inputs.ecr_repo }}
          DH_USER: ${{ secrets.dockerhub_username }}
          DH_REPO: ${{ inputs.dockerhub_repo }}
        run: |
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "ecr_name=$ECR_REGISTRY/$ECR_REPO" >> $GITHUB_OUTPUT
          echo "dh_name=$DH_USER/$DH_REPO" >> $GITHUB_OUTPUT

      # 4. Docker 이미지 빌드 및 태그 동시 지정
      - name: Build and tag Docker image
        env:
          # 이전 단계 출력값 사용
          ECR_IMAGE_NAME: ${{ steps.set-names.outputs.ecr_name }}
          DH_IMAGE_NAME: ${{ steps.set-names.outputs.dh_name }}
          IMAGE_TAG: ${{ steps.tag-image.outputs.tag }}
          DOCKER_BUILDKIT: 1
        # 빌드 시 필요한 모든 태그를 한 번에 지정
        run: |
          docker build . \
            --tag $ECR_IMAGE_NAME:$IMAGE_TAG \
            --tag $ECR_IMAGE_NAME:latest \
            --tag $DH_IMAGE_NAME:$IMAGE_TAG \
            --tag $DH_IMAGE_NAME:latest

      # GHCR 로그인 및 푸시 단계 추가
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      
      - name: Push to GHCR
        id: push-ghcr
        env:
          ECR_IMAGE_NAME: ${{ steps.set-names.outputs.ecr_name }}
          IMAGE_TAG: ${{ steps.tag-image.outputs.tag }}
        run: |
          # 먼저 GitHub 표현식을 변수에 할당
          REPO_NAME=${{ github.repository }}
          # 그 다음 Bash에서 소문자 변환
          REPO_NAME_LOWERCASE="${REPO_NAME,,}"
          # /build-cache 대신 -build-cache 사용
          GHCR_IMAGE="ghcr.io/${REPO_NAME_LOWERCASE}-build-cache:$IMAGE_TAG"

          # 이미지가 실제로 존재하면 태그 지정
          docker tag $ECR_IMAGE_NAME:$IMAGE_TAG $GHCR_IMAGE
          docker push $GHCR_IMAGE
          echo "image_uri=$GHCR_IMAGE" >> $GITHUB_OUTPUT