# .github/workflows/reusable-docker-build.yml
# 목적: Dockerfile을 사용하여 이미지를 빌드/캐시하고, GHCR에 푸시하며, 이미지 정보를 출력합니다.
name: Reusable - Build Docker Image, Push Cache/GHCR, Output Info

on:
  workflow_call:
    inputs:
      aws_region:
        description: 'AWS region for ECR'
        required: true
        type: string
      aws_account_id:
        description: 'AWS Account ID for ECR registry'
        required: true
        type: string
      ecr_repo:
        description: 'AWS ECR repository name'
        required: true
        type: string
      dockerhub_repo_base:
        description: 'Base Docker Hub repository name (without username)'
        required: true
        type: string
      ghcr_repo_name:
        description: 'GHCR repository name (defaults to GitHub repo name)'
        required: false
        type: string
        default: ${{ github.event.repository.name }}

    outputs:
      image_digest:
        description: '빌드/푸시된 이미지의 다이제스트 (sha256:...)'
        value: ${{ jobs.build_image_job.outputs.digest }}
      image_tag_sha:
        description: 'Git SHA 기반 태그 (예: sha-xxxx)'
        value: ${{ jobs.build_image_job.outputs.tag_sha }}
      image_name_ecr:
        description: 'ECR용 전체 이미지 이름 (태그 제외)'
        value: ${{ jobs.build_image_job.outputs.ecr_image_name_no_tag }}
      dh_repo_name_base_output:
        description: 'Base Docker Hub repository name output'
        value: ${{ jobs.build_image_job.outputs.dh_repo_name_base_step_output }}
      ghcr_image_uri_sha:
         description: 'GHCR에 푸시된 이미지의 전체 URI (SHA 태그 포함)'
         value: ${{ jobs.build_image_job.outputs.ghcr_uri_sha_output }}

jobs:
  build_image_job:
    name: Build, Cache, Push GHCR, Get Info
    runs-on: ubuntu-24.04
    permissions:
      packages: write # GHCR 푸시/캐시 권한
      contents: read
    outputs:
      ecr_image_name_no_tag: ${{ steps.set-names.outputs.ecr_name }}
      dh_repo_name_base_step_output: ${{ steps.set-names.outputs.dh_repo_base }}
      tag_sha: ${{ steps.tag-image.outputs.tag }}
      digest: ${{ steps.extract-digest.outputs.image_digest }}
      ghcr_uri_sha_output: ${{ steps.set-names.outputs.ghcr_image_sha }}

    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Image Tag (SHA)
        id: tag-image
        run: echo "tag=sha-${{ github.sha }}" >> $GITHUB_OUTPUT
        shell: bash

      # 소스 코드로부터 빌드 ID 생성 (변경 시에만 달라지도록)
      - name: Generate Build ID from source
        id: build-id
        run: |
          # 소스 파일의 해시 생성 (Dockerfile, 소스 코드 등)
          SOURCE_HASH=$(find . -type f -not -path "./.git/*" -not -path "./out/*" -not -path "./build/*" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "source_hash=${SOURCE_HASH}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set Image Names (ECR, GHCR) and Output Base DH Name
        id: set-names
        env:
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ inputs.aws_region }}
          ECR_REPO: ${{ inputs.ecr_repo }}
          DH_REPO_BASE_INPUT: ${{ inputs.dockerhub_repo_base }}
          REPO_OWNER: ${{ github.repository_owner }}
          GHCR_REPO_INPUT: ${{ inputs.ghcr_repo_name }}
          TAG_SHA: ${{ steps.tag-image.outputs.tag }}
        run: |
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          ECR_NAME="$ECR_REGISTRY/$ECR_REPO"

          GHCR_OWNER_LC=$(echo "$REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          GHCR_REPO_LC=$(echo "$GHCR_REPO_INPUT" | tr '[:upper:]' '[:lower:]')
          GHCR_BASE="ghcr.io/${GHCR_OWNER_LC}/${GHCR_REPO_LC}"
          GHCR_IMAGE_SHA="${GHCR_BASE}:${TAG_SHA}"
          GHCR_CACHE_REF="${GHCR_BASE}:buildcache"

          echo "ecr_name=$ECR_NAME" >> $GITHUB_OUTPUT
          echo "ghcr_image_sha=$GHCR_IMAGE_SHA" >> $GITHUB_OUTPUT
          echo "ghcr_cache_ref=$GHCR_CACHE_REF" >> $GITHUB_OUTPUT
          echo "dh_repo_base=$DH_REPO_BASE_INPUT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      # 현재 GHCR에 있는 이미지의 다이제스트 확인
      - name: Check existing GHCR image digest
        id: check-ghcr
        continue-on-error: true
        run: |
          GHCR_IMAGE="${{ steps.set-names.outputs.ghcr_image_sha }}"
          EXISTING_DIGEST=$(docker manifest inspect $GHCR_IMAGE --verbose 2>/dev/null | jq -r '.Descriptor.digest // ""' || echo "")
          echo "existing_digest=$EXISTING_DIGEST" >> $GITHUB_OUTPUT
          echo "Existing GHCR image digest: $EXISTING_DIGEST"
        shell: bash

      # 빌드 및 GHCR 푸시 (개선된 캐싱 설정)
      - name: Build and push to GHCR with Cache
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.set-names.outputs.ghcr_image_sha }}
          push: true
          cache-from: type=registry,ref=${{ steps.set-names.outputs.ghcr_cache_ref }}
          cache-to: type=registry,ref=${{ steps.set-names.outputs.ghcr_cache_ref }},mode=min
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_ID=${{ steps.build-id.outputs.source_hash }}
            BUILD_DATE=${{ steps.build-id.outputs.build_date }}
            GIT_COMMIT=${{ github.sha }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            build.id=${{ steps.build-id.outputs.source_hash }}
            build.date=${{ steps.build-id.outputs.build_date }}

      # 이미지 다이제스트 추출 - skopeo 사용
      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo
        shell: bash

      - name: Extract image digest using skopeo
        id: extract-digest
        run: |
          # Registry 인증정보 활용하여 skopeo inspect 실행
          GHCR_IMAGE="${{ steps.set-names.outputs.ghcr_image_sha }}"
          
          # skopeo를 사용하여 컨텐츠 다이제스트만 추출 (메타데이터 제외)
          IMAGE_DIGEST=$(skopeo inspect --raw docker://$GHCR_IMAGE | jq -r '.config.digest')
          
          echo "Extracted content digest: $IMAGE_DIGEST"
          echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
          
          # 기존 다이제스트와 비교
          if [ "$IMAGE_DIGEST" == "${{ steps.check-ghcr.outputs.existing_digest }}" ]; then
            echo "Image content is identical to existing image"
          else
            echo "Image content has changed from existing image"
          fi
        shell: bash

      # build-push-action의 digest 출력 확인 (디버깅용)
      - name: Debug image info
        if: always()
        run: |
          echo "Image pushed to GHCR: ${{ steps.set-names.outputs.ghcr_image_sha }}"
          echo "Build-push action digest: ${{ steps.build-push.outputs.digest }}"
          echo "Extracted content digest: ${{ steps.extract-digest.outputs.image_digest }}"
        shell: bash