name: CI Build and Docs

on:
  push:
    branches: [ "main" ]
jobs:
  build-and-docs:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      # vcpkg 서브모듈 초기화 및 부트스트랩
      - name: Set up vcpkg
        run: |
          git submodule update --init --recursive
          .\vcpkg\bootstrap-vcpkg.bat

      # CMake 구성 (vcpkg 툴체인 파일 사용, x64 플랫폼 예시)
      - name: Configure CMake
        run: cmake -B build -S . -A x64 ^
               -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake ^
               -DCMAKE_BUILD_TYPE=Release

      # 빌드 실행
      - name: Build
        run: cmake --build build --config Release

      # Doxygen 설치 (Chocolatey 이용)
      - name: Install Doxygen
        run: choco install doxygen.install -y

      # Doxygen 문서 생성
      - name: Generate Doxygen Documentation
        run: doxygen docs\Doxyfile

      # (선택) 생성된 문서를 아티팩트로 업로드하거나 배포
      - name: Upload Docs Artifact
        uses: actions/upload-artifact@v3
        with:
          name: DoxygenDocs
          path: docs/docs_output/html  # HTML 문서 경로를 아티팩트로 지정

  deploy:
    runs-on: ubuntu-latest  # Pages 배포는 경량 작업이므로 리눅스 러너 사용
    needs: build-and-docs   # build-and-docs job 완료 후 실행
    permissions:
      pages: write          # GitHub Pages 배포 권한
      id-token: write       # OIDC 토큰 권한 (페이지 배포 인증용)
    environment:
      name: github-pages    # 배포 대상 환경 이름 (github-pages 로 지정 시 Pages 연동)
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # 설명: GitHub Pages에 배포 - upload-pages-artifact로 업로드된 사이트 콘텐츠를 Pages에 게시.
        #       actions/deploy-pages@v4 액션이 Artifact를 자동으로 다운로드하여 설정된 Pages 환경에 배포함.
        #       id: deployment으로 지정하여, 배포된 페이지 URL을 environment.url에 전달 (steps.deployment.outputs.page_url).
