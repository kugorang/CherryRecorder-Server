# GitHub Actions 워크플로우 이름 정의
name: CI - Multi-Job Refined

# ==================================================
# 워크플로우 실행 조건 (Triggers)
# ==================================================
# 어떤 이벤트가 발생했을 때 이 워크플로우를 실행할지 정의합니다.
on:
  # 1. 'main' 브랜치로 코드가 푸시(push)될 때 실행됩니다.
  push:
    branches: [ main ]
  # 2. 'main' 브랜치를 대상으로 하는 풀 리퀘스트(pull request)가 생성되거나 업데이트될 때 실행됩니다.
  pull_request:
    branches: [ main ]

# ==================================================
# 워크플로우 작업 (Jobs)
# ==================================================
# 워크플로우는 하나 이상의 Job으로 구성되며, 각 Job은 독립적인 환경에서 실행됩니다.
# 이 워크플로우는 3개의 Job으로 구성되어 순차적으로 실행됩니다: 빌드/테스트 -> 문서 생성 -> 배포
jobs:
  # ==============================================================
  # Job 1: CMake 프로젝트 빌드 및 테스트 (Windows 환경)
  # ==============================================================
  # 목적: 프로젝트 소스 코드를 컴파일하고 단위 테스트를 실행하여 코드의 기본적인 무결성을 검증합니다.
  # 특징: vcpkg를 이용한 C++ 의존성 관리 및 캐싱, CMake 빌드 시스템 사용, Windows 환경에서 실행됩니다.
  cmake_build_test:
    name: 1. CMake Build & Test (Windows)
    # 실행 환경: vcpkg 및 Visual Studio (MSVC) 컴파일러 사용을 위해 Windows 최신 버전을 사용합니다.
    runs-on: windows-latest

    # Job 단계 (Steps): Job 내에서 순차적으로 실행되는 명령어 또는 액션의 목록입니다.
    steps:
      # --------------------------------------------------------------
      # 단계 1.1: 소스 코드 체크아웃
      # --------------------------------------------------------------
      # 목적: 워크플로우 실행 환경(Runner)으로 Git 저장소의 최신 코드를 내려받습니다.
      - name: 1.1 Check out source code repository
        uses: actions/checkout@v4 # GitHub에서 제공하는 코드 체크아웃 액션 사용
        with:
          # submodules: true : Git 서브모듈(여기서는 vcpkg)을 함께 가져옵니다. vcpkg 사용에 필수적입니다.
          submodules: true
          # fetch-depth: 0 : Git 저장소의 전체 변경 이력(history)을 가져옵니다.
          #                 vcpkg가 특정 라이브러리 버전(baseline)을 참조하기 위해 과거 커밋 정보가 필요하므로,
          #                 전체 이력을 가져오는 것이 안전합니다. (얕은 복제 시 오류 발생 가능)
          fetch-depth: 0

      # --------------------------------------------------------------
      # 단계 1.2 & 1.3: vcpkg 바이너리 캐싱 활성화 (GHA 연동)
      # --------------------------------------------------------------
      # 목적: vcpkg가 컴파일한 라이브러리 파일(.lib, .dll 등)을 GitHub Actions 캐시에 저장하고,
      #       이후 실행 시 동일한 라이브러리를 다시 컴파일하지 않고 캐시에서 바로 가져와 빌드 시간을 단축합니다.
      # 참고: vcpkg는 특정 환경 변수(`ACTIONS_CACHE_URL`, `ACTIONS_RUNTIME_TOKEN`)가 설정되고,
      #       `VCPKG_BINARY_SOURCES`에 `x-gha`가 포함되면 자동으로 GHA 캐시를 사용합니다.

      # 단계 1.2: vcpkg가 GHA 캐시 인증 정보를 사용하도록 환경 변수 설정
      - name: 1.2 Enable vcpkg GitHub Actions Cache Integration
        uses: actions/github-script@v7 # GitHub API 및 워크플로우 컨텍스트 접근을 위한 액션
        with:
          # script: | 블록 내부는 JavaScript로 실행됩니다.
          # ACTIONS_CACHE_URL: GitHub Actions 캐시 서비스 URL을 환경 변수로 내보냅니다.
          # ACTIONS_RUNTIME_TOKEN: 현재 워크플로우 실행의 인증 토큰을 환경 변수로 내보냅니다.
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      # 단계 1.3: vcpkg가 GHA 캐시를 사용하도록 바이너리 소스 지정
      - name: 1.3 Configure vcpkg binary caching source via Env Var
        # `VCPKG_BINARY_SOURCES` 환경 변수를 설정하여 vcpkg의 바이너리 캐시 동작을 제어합니다.
        #   - `clear`: 기본 캐시 설정을 비활성화합니다.
        #   - `x-gha`: GitHub Actions 캐시 사용을 명시합니다.
        #   - `,readwrite`: 캐시 읽기(read) 및 쓰기(write)를 모두 허용합니다.
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

      # --------------------------------------------------------------
      # 단계 1.4: vcpkg 작업 디렉토리 캐싱 (다운로드, 빌드 중간 산출물)
      # --------------------------------------------------------------
      # 목적: vcpkg가 라이브러리 소스를 다운로드하는 폴더(`downloads`)와 빌드 중 임시 파일을 저장하는
      #       폴더(`buildtrees`)를 캐싱합니다. 바이너리 캐싱(1.3)과 함께 사용하면 더욱 효과적입니다.
      - name: 1.4 Cache vcpkg downloads and buildtrees directories
        uses: actions/cache@v4 # 파일 및 디렉토리 캐싱을 위한 액션
        with:
          # path: 캐싱할 대상 경로들을 지정합니다.
          path: |
            ${{ github.workspace }}/vcpkg/downloads
            ${{ github.workspace }}/vcpkg/buildtrees
          # key: 캐시를 식별하는 고유 키입니다. OS와 vcpkg.json 파일 내용(의존성)이 동일하면 같은 캐시를 사용합니다.
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          # restore-keys: 정확히 일치하는 key가 없을 때 사용할 대체 키 패턴입니다. (부분적 캐시 활용)
          restore-keys: |
            vcpkg-${{ runner.os }}-

      # --------------------------------------------------------------
      # 단계 1.5: vcpkg 부트스트랩 (vcpkg 실행 파일 생성)
      # --------------------------------------------------------------
      # 목적: vcpkg 도구 자체(`vcpkg.exe`)를 빌드합니다. CMake에서 의존성 관리를 위해 필요합니다.
      # 참고: 캐시가 있더라도 vcpkg 업데이트 등을 반영하기 위해 실행하는 것이 좋습니다.
      - name: 1.5 Bootstrap vcpkg (Build vcpkg executable)
        # vcpkg 부트스트랩 스크립트 실행 (-disableMetrics는 선택 사항)
        run: .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        shell: cmd # Windows 배치 파일(.bat) 실행에는 cmd 쉘이 더 안정적일 수 있습니다.

      # --------------------------------------------------------------
      # 단계 1.6: CMake 빌드 디렉토리 캐싱
      # --------------------------------------------------------------
      # 목적: CMake가 생성하는 빌드 파일, 컴파일된 오브젝트 파일 등이 저장될 `build` 디렉토리를 캐싱합니다.
      #       이를 통해 재실행 시 Configure 단계를 가속화하고, 변경된 부분만 다시 빌드(증분 빌드)합니다.
      - name: 1.6 Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build # 'build' 디렉토리 캐싱
          # key: OS, CMakeLists.txt 내용, vcpkg.json 내용이 동일하면 같은 캐시를 사용합니다.
          key: build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/vcpkg.json') }}
          restore-keys: | # 대체 캐시 키
            build-${{ runner.os }}-

      # --------------------------------------------------------------
      # 단계 1.7: CMake Configure (프로젝트 구성 및 의존성 해결)
      # --------------------------------------------------------------
      # 목적: CMake를 사용하여 빌드 환경 설정을 구성하고, vcpkg를 통해 필요한 라이브러리를 설치/연결합니다.
      # 참고: vcpkg 관련 캐시(1.3, 1.4)가 잘 적용되었다면, 의존성 설치는 매우 빠르게 완료됩니다.
      - name: 1.7 Configure CMake project (and install dependencies via vcpkg)
        # PowerShell 스크립트로 CMake 명령어 실행
        # 빌드 디렉토리 지정 (-B build)
        # 소스 디렉토리 지정 (-S .)
        # 아키텍처 지정 (-A x64)
        # vcpkg 툴체인 파일 지정 (vcpkg 연동)
        # 빌드 유형 지정 (-DCMAKE_BUILD_TYPE=Release)
        run: |
          cmake -B build `
                -S . `
                -A x64 `
                -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake `
                -DCMAKE_BUILD_TYPE=Release
        shell: powershell # PowerShell 사용 및 줄 연속을 위해 백틱(`) 사용

      # --------------------------------------------------------------
      # 단계 1.8: CMake Build (프로젝트 컴파일)
      # --------------------------------------------------------------
      # 목적: Configure 단계에서 설정된 내용을 바탕으로 실제 소스 코드를 컴파일합니다.
      # 참고: 빌드 디렉토리 캐시(1.6)가 적용되면 변경된 파일만 컴파일하므로 빠르게 완료될 수 있습니다.
      - name: 1.8 Build Project using CMake (Release configuration)
        # 'build' 디렉토리의 'Release' 구성으로 빌드
        run: cmake --build build --config Release

      # --------------------------------------------------------------
      # 단계 1.9: 테스트 실행 (CTest 사용)
      # --------------------------------------------------------------
      # 목적: 컴파일된 코드를 대상으로 단위 테스트를 실행하여 기능적 정확성을 검증합니다.
      - name: 1.9 Run tests via CTest
        # 테스트 실행 파일이 있는 빌드 디렉토리로 이동
        # CTest 실행: 'Release' 구성으로 빌드된 테스트 실행, 실패 시 상세 로그 출력
        # 원래 디렉토리로 복귀
        run: |
          cd build
          ctest -C Release --output-on-failure
          cd ..
        shell: cmd # cd 및 ctest 실행에는 cmd 사용도 무방 (powershell 기본값 사용 가능)

  # ==============================================================
  # Job 2: Doxygen 문서 생성 (Windows 환경)
  # ==============================================================
  # 목적: 프로젝트 소스 코드를 분석하여 Doxygen으로 API 문서를 생성하고, 배포를 위해 준비합니다.
  # 의존성: 이 Job은 'cmake_build_test' Job이 성공해야만 시작됩니다.
  generate_docs:
    name: 2. Generate Documentation (Windows)
    # 실행 환경: Doxygen 설치에 Chocolatey(choco)를 사용하므로 Windows 환경을 유지합니다.
    #           (Linux에서 'apt' 등으로 설치하거나 'setup-doxygen' 액션 사용도 가능)
    runs-on: windows-latest
    needs: cmake_build_test # 이전 Job(빌드/테스트) 성공 시 실행

    steps:
      # --------------------------------------------------------------
      # 단계 2.1: 소스 코드 체크아웃 (문서 생성을 위해)
      # --------------------------------------------------------------
      # 목적: Doxygen이 분석할 소스 코드를 현재 Job 환경으로 가져옵니다. (각 Job은 독립 환경)
      - name: 2.1 Check out source code for documentation
        uses: actions/checkout@v4
        # 참고: Doxygen 설정(Doxyfile)이 Git 이력이나 서브모듈을 참조하지 않으면,
        #       아래 옵션으로 체크아웃 속도를 높일 수 있습니다. (필요시 주석 해제)
        # with:
        #   fetch-depth: 1   # 최신 커밋만 가져오기
        #   submodules: false # 서브모듈 제외

      # --------------------------------------------------------------
      # 단계 2.2: Doxygen 설치
      # --------------------------------------------------------------
      # 목적: 문서 생성 도구 Doxygen을 설치합니다.
      - name: 2.2 Install Doxygen tool
        # Chocolatey로 Doxygen 설치 (-y: 자동 확인)
        run: choco install doxygen.portable -y

      # --------------------------------------------------------------
      # 단계 2.3: Doxygen 문서 생성 실행
      # --------------------------------------------------------------
      # 목적: 'Doxyfile'(Doxygen 설정 파일)을 사용하여 소스 코드로부터 문서를 생성합니다.
      - name: 2.3 Generate Documentation using Doxygen
        # 저장소 루트 기준 Doxyfile 경로 지정하여 실행
        run: doxygen ./docs/Doxyfile

      # --------------------------------------------------------------
      # 단계 2.4: GitHub Pages 배포용 아티팩트 업로드
      # --------------------------------------------------------------
      # 목적: 생성된 Doxygen 문서(HTML 파일 등)를 다음 'deploy_pages' Job에서 사용할 수 있도록
      #       GitHub Pages 배포 전용 아티팩트로 패키징하여 업로드합니다.
      - name: 2.4 Upload artifact for Pages deployment
        uses: actions/upload-pages-artifact@v3 # Pages 배포용 아티팩트 업로드 액션
        with:
          # path: 업로드할 문서 파일들이 있는 디렉토리 경로. Doxyfile의 OUTPUT_DIRECTORY 설정과 맞춰야 합니다.
          path: ./docs/docs_output/html # 예시 경로, 실제 Doxygen 출력 경로로 수정 필요

  # ==============================================================
  # Job 3: GitHub Pages 배포 (Ubuntu 환경)
  # ==============================================================
  # 목적: 'generate_docs' Job에서 생성한 문서를 GitHub Pages 사이트로 게시(배포)합니다.
  # 의존성: 이 Job은 'generate_docs' Job이 성공해야만 시작됩니다.
  deploy_pages:
    name: 3. Deploy Documentation to GitHub Pages
    # 실행 환경: 배포 작업은 OS 의존성이 낮으므로 빠르고 효율적인 Ubuntu 최신 버전을 사용합니다.
    runs-on: ubuntu-latest
    needs: generate_docs # 이전 Job(문서 생성) 성공 시 실행

    # --------------------------------------------------------------
    # 권한 설정 (Permissions): GitHub Pages 배포에 필수
    # --------------------------------------------------------------
    # 목적: GitHub Actions 워크플로우가 GitHub Pages에 콘텐츠를 쓰고(배포하고)
    #       안전하게 인증(OIDC 토큰 사용)받을 수 있도록 필요한 최소한의 권한을 부여합니다.
    permissions:
      pages: write      # GitHub Pages 콘텐츠 수정 권한
      id-token: write   # GitHub Actions OIDC 토큰 요청/사용 권한 (배포 인증용)

    # --------------------------------------------------------------
    # 배포 환경 설정 (Environment)
    # --------------------------------------------------------------
    # 목적: 배포 대상을 GitHub Pages 환경으로 지정하고, 배포 완료 후 사이트 URL을 제공합니다.
    environment:
      name: github-pages # 'github-pages'로 지정 시 저장소 설정의 Pages와 연동
      url: ${{ steps.deployment.outputs.page_url }} # 배포 완료 후 결과 URL 출력 (아래 단계 ID 참조)

    steps:
      # --------------------------------------------------------------
      # 단계 3.1: GitHub Pages 배포 실행
      # --------------------------------------------------------------
      # 목적: 이전 단계에서 업로드된 문서 아티팩트를 사용하여 실제 배포 작업을 수행합니다.
      - name: 3.1 Deploy to GitHub Pages
        id: deployment # 단계 ID 지정 (environment의 url에서 참조)
        uses: actions/deploy-pages@v4 # GitHub Pages 배포 전용 액션
        # 이 액션은 'upload-pages-artifact'로 생성된 아티팩트를 자동으로 찾아
        # 'github-pages' 환경 설정에 맞게 배포하는 과정을 모두 처리합니다.