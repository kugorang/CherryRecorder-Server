# .github/workflows/reusable-docker-push-ecr.yml
# 목적: 빌드된 Docker 이미지를 AWS ECR로 푸시합니다. OIDC로 인증합니다.
name: Reusable - Push Docker Image to ECR

on:
  workflow_call:
    inputs:
      image_name_ecr: { required: true, type: string }
      image_tag_sha: { required: true, type: string }
      image_tag_latest: { required: true, type: string }
      aws_region: { required: true, type: string }
      local_image_tag_built: # 빌드된 로컬 이미지 태그 (예: localbuild:sha-...)
        required: true
        type: string
      image_digest_built:   # 빌드된 이미지의 다이제스트 (예: sha256:...)
        required: true
        type: string
    secrets:
      aws_role_to_assume: { required: true }

jobs:
  push_ecr_job:
    name: Push Image to AWS ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC 필수 권한
      packages: read

    steps:
      # 1. AWS 자격 증명 설정 (OIDC)
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHubActions-ECR-Push-${{ github.run_id }}

      # 2. ECR 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      # 3. ECR의 :latest 태그 다이제스트 조회 (오류 무시)
      - name: Get ECR :latest image digest
        id: get-latest-digest
        run: |
          ECR_IMAGE_LATEST="${{ inputs.image_name_ecr }}:latest"
          # manifest inspect는 이미지가 없으면 오류 발생, || true로 오류 무시하고 결과 저장
          LATEST_DIGEST=$(docker manifest inspect $ECR_IMAGE_LATEST --verbose 2>/dev/null | jq -r '.Descriptor.digest // ""' || echo "")
          echo "Current :latest digest in ECR: $LATEST_DIGEST"
          echo "latest_digest=$LATEST_DIGEST" >> $GITHUB_OUTPUT
        shell: bash

      # 4. 다이제스트 비교 및 푸시 결정
      - name: Check digests and set push flag
        id: check-push
        run: |
          BUILT_DIGEST="${{ inputs.image_digest_built }}"
          LATEST_DIGEST="${{ steps.get-latest-digest.outputs.latest_digest }}"
          echo "Built Digest: $BUILT_DIGEST"
          echo "Latest Digest: $LATEST_DIGEST"
          if [ "$BUILT_DIGEST" != "$LATEST_DIGEST" ] || [ -z "$LATEST_DIGEST" ]; then
            echo "Digests differ or :latest not found. Push required."
            echo "push_required=true" >> $GITHUB_OUTPUT
          else
            echo "Digests match. No push required."
            echo "push_required=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 5. 태그 지정 및 푸시 (조건부 실행)
      - name: Tag and Push image to ECR
        if: steps.check-push.outputs.push_required == 'true'
        env:
          ECR_IMAGE_BASE: ${{ inputs.image_name_ecr }}
          TAG_SHA: ${{ inputs.image_tag_sha }}
          TAG_LATEST: ${{ inputs.image_tag_latest }}
          LOCAL_IMAGE: ${{ inputs.local_image_tag_built }} # 빌드 시 사용한 로컬 태그
        run: |
          echo "Tagging $LOCAL_IMAGE -> $ECR_IMAGE_BASE:$TAG_SHA and $ECR_IMAGE_BASE:$TAG_LATEST"
          # docker pull $LOCAL_IMAGE # 이미 로컬에 load 되어 있어야 함 (build job에서 load:true)
          docker tag $LOCAL_IMAGE $ECR_IMAGE_BASE:$TAG_SHA
          docker tag $LOCAL_IMAGE $ECR_IMAGE_BASE:$TAG_LATEST

          echo "Pushing $ECR_IMAGE_BASE:$TAG_SHA"
          docker push $ECR_IMAGE_BASE:$TAG_SHA

          echo "Pushing $ECR_IMAGE_BASE:$TAG_LATEST"
          docker push $ECR_IMAGE_BASE:$TAG_LATEST
        shell: bash

      # 6. 푸시 건너뛰기 메시지 (조건부 실행)
      - name: Image push skipped
        if: steps.check-push.outputs.push_required == 'false'
        run: echo "Image content has not changed. Skipping ECR push."
        shell: bash