# .github/workflows/reusable-docker-push-ecr.yml
name: Reusable - Push Docker Image to ECR

on:
  workflow_call:
    inputs:
      image_name_ecr:
        required: true
        type: string
      image_tag_sha:
        required: true
        type: string
      image_tag_latest:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      image_digest_built:
        required: true
        type: string
      ghcr_image_uri_sha:
        required: true
        type: string
      # 추가 입력 파라미터
      ecr_auto_create_repo:
        required: false
        type: boolean
        default: true
      enable_image_scanning:
        required: false
        type: boolean
        default: true
    secrets:
      aws_role_to_assume:
        required: true
    outputs:
      pushed:
        description: "'true' if image was pushed, 'false' otherwise"
        value: ${{ jobs.push_ecr_job.outputs.pushed_output }}
      ecr_image_uri:
        description: "Full URI of pushed image with SHA tag"
        value: ${{ jobs.push_ecr_job.outputs.ecr_image_uri }}

jobs:
  push_ecr_job:
    name: Pull GHCR, Check Digest, Push to ECR
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      packages: read
    outputs:
      pushed_output: ${{ steps.check-push.outputs.push_required }}
      ecr_image_uri: ${{ steps.push-image.outputs.image_uri }}

    steps:
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHubActions-ECR-Push-${{ github.run_id }}

      # 리포지토리 자동 생성 (조건부)
      - name: Create ECR repository if it doesn't exist
        if: inputs.ecr_auto_create_repo == true
        run: |
          REPO_NAME=$(echo "${{ inputs.image_name_ecr }}" | cut -d'/' -f2)
          
          # 리포지토리 존재 여부 확인
          if ! aws ecr describe-repositories --repository-names $REPO_NAME 2>/dev/null; then
            echo "Creating ECR repository: $REPO_NAME"
            aws ecr create-repository \
              --repository-name $REPO_NAME \
              --image-scanning-configuration scanOnPush=${{ inputs.enable_image_scanning }} \
              --encryption-configuration encryptionType=AES256
          else
            echo "ECR repository $REPO_NAME already exists"
          fi
        shell: bash
        continue-on-error: true

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      # skopeo 설치 (이미지 검사용)
      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo
        shell: bash

      # 다이제스트 비교 개선 (skopeo 사용)
      - name: Check image digests
        id: check-push
        run: |
          # GHCR 이미지 콘텐츠 다이제스트 확인
          GHCR_IMAGE="${{ inputs.ghcr_image_uri_sha }}"
          BUILT_DIGEST=$(skopeo inspect --format '{{.Digest}}' docker://$GHCR_IMAGE 2>/dev/null || echo "")
          
          # ECR 이미지 존재 여부 및 다이제스트 확인
          ECR_IMAGE_LATEST="${{ inputs.image_name_ecr }}:latest"
          LATEST_DIGEST=""
          
          if skopeo inspect docker://$ECR_IMAGE_LATEST &>/dev/null; then
            LATEST_DIGEST=$(skopeo inspect --format '{{.Digest}}' docker://$ECR_IMAGE_LATEST)
            echo "Current ECR image digest: $LATEST_DIGEST"
          else
            echo "No existing image found in ECR"
          fi
          
          # 다이제스트 비교
          if [ "$BUILT_DIGEST" != "$LATEST_DIGEST" ] || [ -z "$LATEST_DIGEST" ]; then
            echo "Image content changed or does not exist. Push required."
            echo "push_required=true" >> $GITHUB_OUTPUT
          else
            echo "Image content unchanged. No push required."
            echo "push_required=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
        continue-on-error: true

      # 푸시 실패 시 재시도 로직 추가
      - name: Pull from GHCR, Tag, and Push image to ECR
        id: push-image
        if: steps.check-push.outputs.push_required == 'true'
        env:
          ECR_IMAGE_BASE: ${{ inputs.image_name_ecr }}
          TAG_SHA: ${{ inputs.image_tag_sha }}
          TAG_LATEST: ${{ inputs.image_tag_latest }}
          GHCR_IMAGE_SHA: ${{ inputs.ghcr_image_uri_sha }}
        run: |
          MAX_RETRIES=3
          RETRY_DELAY=5
          
          # Pull 이미지
          echo "Pulling image from GHCR: $GHCR_IMAGE_SHA"
          docker pull $GHCR_IMAGE_SHA || { echo "Failed to pull image"; exit 1; }
          
          # Tag 설정
          docker tag $GHCR_IMAGE_SHA $ECR_IMAGE_BASE:$TAG_SHA
          docker tag $GHCR_IMAGE_SHA $ECR_IMAGE_BASE:$TAG_LATEST
          
          # 재시도 로직을 적용한 푸시 함수
          push_with_retry() {
            local image="$1"
            local retry=0
            
            while [ $retry -lt $MAX_RETRIES ]; do
              echo "Push attempt $((retry+1))/$MAX_RETRIES: $image"
              if docker push $image; then
                return 0
              fi
              retry=$((retry+1))
              [ $retry -lt $MAX_RETRIES ] && sleep $((RETRY_DELAY * retry))
            done
            return 1
          }
          
          # SHA 태그 푸시
          if ! push_with_retry "$ECR_IMAGE_BASE:$TAG_SHA"; then
            echo "Failed to push $ECR_IMAGE_BASE:$TAG_SHA after $MAX_RETRIES attempts"
            exit 1
          fi
          
          # latest 태그 푸시
          if ! push_with_retry "$ECR_IMAGE_BASE:$TAG_LATEST"; then
            echo "Failed to push $ECR_IMAGE_BASE:$TAG_LATEST after $MAX_RETRIES attempts"
            # SHA 태그는 이미 푸시되었으므로 전체 작업은 실패로 처리하지 않음
            echo "Warning: Failed to push latest tag, but SHA tag was successful"
          fi
          
          # 이미지 URI 출력
          echo "image_uri=$ECR_IMAGE_BASE:$TAG_SHA" >> $GITHUB_OUTPUT
        shell: bash

      - name: Image push skipped
        if: steps.check-push.outputs.push_required == 'false'
        run: echo "Image content has not changed. Skipping ECR push."
        shell: bash

      - name: Set explicit outputs
        if: always()
        run: |
          if [ "${{ steps.check-push.outputs.push_required }}" == "true" ]; then
            echo "pushed_output=true" >> $GITHUB_OUTPUT
          else
            echo "pushed_output=false" >> $GITHUB_OUTPUT
          fi
        shell: bash